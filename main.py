import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import BOT_TOKEN, CHANNEL_USERNAME
from asyncio import sleep
from collections import defaultdict

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ—Ö, –∫—Ç–æ "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏"
waiting_users = defaultdict(lambda: False)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –ö–Ω–æ–ø–∫–∏
def get_subscribe_button():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")
    return kb.as_markup()


def get_price_button():
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÑ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–π—Å", callback_data="get_price")
    return kb.as_markup()


def get_bonus_button():
    kb = InlineKeyboardBuilder()
    kb.button(text="üéÅ –ë–æ–Ω—É—Å", callback_data="get_bonus")
    return kb.as_markup()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ("member", "administrator", "creator")
    except:
        return False


async def wait_and_remind(user_id: int):
    await sleep(600)  # 10 –º–∏–Ω—É—Ç

    if waiting_users.get(user_id):
        try:
            await bot.send_message(
                user_id,
                "–Ø –∂–¥—É —É–∂–µ 10 –º–∏–Ω—É—Ç, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª—É—á–∏ –ø—Ä–∞–π—Å üòÖ",
                reply_markup=get_subscribe_button()
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")


# –°—Ç–∞—Ä—Ç
@dp.message(F.text, F.text.lower() == "/start")
async def start(message: types.Message):
    user_id = message.from_user.id

    if await is_subscribed(user_id):
        await message.answer(
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–π—Å:",
            reply_markup=get_price_button()
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–π—Å, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
            reply_markup=get_subscribe_button()
        )
        await message.answer(CHANNEL_USERNAME)

        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç—Å—è
        waiting_users[user_id] = True
        asyncio.create_task(wait_and_remind(user_id))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
@dp.callback_query(F.data == "check_sub")
async def check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    waiting_users[callback.from_user.id] = False
    if await is_subscribed(user_id):
        await callback.message.answer(
            "–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏üëá",
            reply_markup=get_price_button()
        )
    else:
        await callback.message.answer(
            "–ú–µ–Ω—è –Ω–µ –æ–±–º–∞–Ω—É—Ç—å! –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª,—á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–π—Å.",
            reply_markup=get_subscribe_button()
        )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ø—Ä–∞–π—Å"
@dp.callback_query(F.data == "get_price")
async def send_price(callback: types.CallbackQuery):
    pdf_file = FSInputFile("files/price.pdf")
    await callback.message.answer_document(
        document=pdf_file,
        caption="–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ pdf —Ñ–∞–π–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏. –¢–∞–∫–∂–µ –æ—Å—Ç–∞–≤–ª—é –∑–¥–µ—Å—å –∫–Ω–æ–ø–∫—É, –Ω–∞–∂–º–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—åüíº",
        reply_markup=get_bonus_button()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–±–æ–Ω—É—Å"
@dp.callback_query(F.data == "get_bonus")
async def send_bonus(callback: types.CallbackQuery):
    video_file = FSInputFile("files/bonus.mp4")
    await callback.message.answer_video(
        video=video_file,
        caption="–î–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ –¥–æ –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –ª–∏—á–Ω–æ –æ—Ç –º–µ–Ω—è! –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è —Å–≤–æ–µ–≥–æ –∑–Ω–∞–∫–∞ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –≤–∏–¥–µ–ª —É –º–µ–Ω—è, –º–æ–∂–Ω–æ –∑–¥–µ—Å—å @GWSign_Bot üéâ"
    )
    await callback.answer()


# –ó–∞–ø—É—Å–∫
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
